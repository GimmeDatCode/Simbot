var logBackup = console.log;
var logMessages = [];
console.log = function () {
  logMessages.push.apply(logMessages, arguments);
  if (CONSOLE_LOG) {
    logBackup.apply(console, arguments);
  }
};
let BAT = [0, 100, 120, 140, 160, 180, 210, 250, 285, 315, 340];

let LAS = [0,
  [80, 200],
  [90, 220],
  [100, 240],
  [110, 270],
  [125, 300],
  [140, 340],
  [155, 380],
  [170, 420],
  [185, 460],
  [200, 500]];

let MAB = [0,
  [60, 3],
  [70, 3],
  [80, 3],
  [90, 3],
  [90, 4],
  [100, 4],
  [110, 4],
  [110, 5],
  [120, 5],
  [130, 5]];

let DUL = [0,
  [80, 250],
  [90, 300],
  [100, 350],
  [110, 400],
  [120, 450],
  [130, 500],
  [140, 550],
  [160, 600],
  [180, 650],
  [200, 700]];

let SEN = "BAT6:750"
let GUA = "BAT1:7000"
let INT = "MAB5:8000"

class BS {
  constructor(weapon, weaponLevel, shield) {
    this.weapon = weapon
    this.weaponLevel = weaponLevel
    this.shield = shield
    //fighting will be an array of the ships
    //this ships is engaged with
    this.fighting = []
    this.laserTime
  }
}

function getRand(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function parse(inStr) {
  sides = inStr.split("V")
  side1 = sides[0].trim()
  side2 = sides[1].trim()
  side1 = side1.split(",")
  side2 = side2.split(",")

  //console.log(side1)
  //console.log(side2)
  //return
  ships = [[], []]
  for (ship of side1) {
    if(ship.includes(":")) {
      //if a ship has : it means manually typed
      ships[0].push(parseShip(ship))
    } else {
      //otherwise, this is a cerb ship of format #NICK eg 5SEN meaning 5 sentinels
      let [numCerb,cerb] = parseCerb(ship)
      for(i=0;i<numCerb;i++) {
        ships[0].push(parseShip(cerb))
      }
    }
  }

  //this is just a copy of side1
  for (ship of side2) {
    if(ship.includes(":")) {
      //if a ship has : it means manually typed
      ships[1].push(parseShip(ship))
    } else {
      //otherwise, this is a cerb ship of format #NICK eg 5SEN meaning 5 sentinels
      let [numCerb,cerb] = parseCerb(ship)
      for(i=0;i<numCerb;i++) {
        ships[1].push(parseShip(cerb))
      }
    }
  }

  return ships
}

function parseCerb(cerb) {
  //remove whitespace
  cerb = cerb.replace(/\s+/g, '');
  let numCerb = parseInt(cerb.charAt(0))
  let cerbNick = cerb.substr(1)  
  var cerbRet = ""
  if(cerbNick == "SEN") {
    cerbRet = SEN
  } else if(cerbNick == "GUA") {
    cerbRet = GUA
  } else if(cerbNick == "INT") {
    cerbRet = INT
  } else {
    throw "Cerberus not identified in: " + cerb
  } 

  return [numCerb,cerbRet]
 
}

function parseShip(b1) {
  console.log("parseShip: " + b1)
  b1 = b1.split(":")

  //parse weapon vs. level
  b1[0] = [b1[0].substr(0, 3), parseInt(b1[0].substr(3, 1))]

  //parseInts on shield
  b1[1] = parseInt(b1[1])

  var BS1 = new BS(b1[0][0], b1[0][1], b1[1])
  return BS1

}

function battleSide(thisSide, sides) {
  sideDead = 0
  for (ship of thisSide) {
    if (typeof (ship.fighting[0]) == 'undefined') {
      break
    }
    if (ship.shield > 0) {
      for (fight of ship.fighting) {
        fight.shield -= getDamage(ship, elapsed)
      }
      doFight(sides)
    } else {
      sideDead += 1
    }
  }
  return sideDead
}

function battle(sides) {
  console.log("battle")
  console.log(sides)
  side1 = sides[0]
  side2 = sides[1]
  elapsed = 0
  side1Win = false
  side2Win = false
  while (true) {
    console.log(sides)

    //need to randomize to avoid single side bias
    if (getRand(0, 10) < 5) {
      side2Dead = battleSide(side2, sides)
      if (side2Dead == side2.length) {
        console.log("SIDE 2 DEAD")
        side1Win = true
        break
      }
      side1Dead = battleSide(side1, sides)
      if (side1Dead == side1.length) {
        console.log("SIDE 1 DEAD")
        side2Win = true
        break
      }
    } else {
      side1Dead = battleSide(side1, sides)
      if (side1Dead == side1.length) {
        console.log("SIDE 1 DEAD")
        side2Win = true
        break
      }
      side2Dead = battleSide(side2, sides)
      if (side2Dead == side2.length) {
        console.log("SIDE 2 DEAD")
        side1Win = true
        break
      }
    }

    elapsed += 1

  }
  console.log(sides)
  return side1Win
}

function getDamage(ship, secs) {
  if (ship.weapon == "BAT") {
    return BAT[ship.weaponLevel]
  } else if (ship.weapon == "LAS") {
    let [lasMin, lasMax] = LAS[ship.weaponLevel]
    lasInc = (lasMax - lasMin) / 45
    lasCalc = lasMin + (lasInc * secs)
    if (lasCalc < lasMax) {
      return lasCalc
    } else {
      return lasMax
    }
  } else if (ship.weapon == "DUL") {
    let [lasMin, lasMax] = DUL[ship.weaponLevel]
    lasInc = (lasMax - lasMin) / 45
    lasCalc = lasMin + (lasInc * secs)
    if (lasCalc < lasMax) {
      return lasCalc
    } else {
      return lasMax
    }
  } else if (ship.weapon == "MAB") {
    return MAB[ship.weaponLevel][0]
  }
}

function findTargets(ship, otherSide) {

  if (ship.weapon == "BAT") {
    numTarg = 1
  } else if (ship.weapon == "LAS") {
    numTarg = 1

  } else if (ship.weapon == "DUL") {
    numTarg = 2
  } else if (ship.weapon == "MAB") {
    numTarg = MAB[ship.weaponLevel][1]
  }

  otherSideAlive = []
  for (otherShip of otherSide) {
    if (otherShip.shield > 0) {
      otherSideAlive.push(otherShip)
    }
  }

  fightAlive = []
  for (otherShip of ship.fighting) {
    if (otherShip.shield > 0) {
      fightAlive.push(otherShip)
    }
  }

  notFightAlive = []
  for (alive of otherSideAlive) {
    if (!fightAlive.includes(alive)) {
      notFightAlive.push(alive)
    }
  }


  //first clean out the dead ships that this ship is fighting
  for (i = 0; i < ship.fighting.length; i++) {
    if (ship.fighting[i].shield <= 0) {
      ship.fighting.splice(i, 1)
      console.log("DEAD SHIP REMOVED" + ship)
    }
  }

  //so take the number of ships that are alive but this ship is not fighting
  //and randomly select ships from a pool of that size to start fighting
  for (i = 0; i < notFightAlive.length; i++) {
    //the case where we can handle 3 ships but other side only has 1
    if (ship.fighting.length == otherSideAlive.length) {
      break
    }
    if (ship.fighting.length == numTarg) {
      break
    }
    console.log("NEW SHIP ADDED" + ship)
    ship.fighting.push(notFightAlive[getRand(0, notFightAlive.length - 1)])
  }
}

function doFight(sides) {
  console.log("doFight")
  side1 = sides[0]
  side2 = sides[1]

  for (ship of side2) {
    findTargets(ship, side1)
  }

  for (ship of side1) {
    findTargets(ship, side2)
  }
  return sides
}




//TODO: test level10 weopons
var T1 = "BAT1:5000 V BAT2:5000"
var T2 = "BAT1:5000,BAT1:1000 V BAT2:5000"
var T3 = "BAT1:5000,BAT1:1000 V BAT9:5000"
var T4 = "BAT1:5000,BAT1:1000 V BAT2:5000,BAT1:1000"
var T5 = "BAT1:5000,BAT1:1000 V BAT5:10000,BAT1:1000"
var T6 = "BAT1:5000,BAT1:1000,BAT4:8000 V BAT5:10000,BAT1:1000"
var T7 = "BAT1:5000,BAT1:1000,BAT4:8000 V BAT5:10000,BAT1:1000,BAT3:3000"
var T8 = "BAT1:8000 V LAS1:5000"
var T9 = "BAT1:1000 V MAB1:5000"
var T10 = "BAT1:1000,BAT1:1000 V MAB1:5000"
var T11 = "BAT1:1000,BAT1:1000,BAT1:1000 V MAB1:5000"
var T12 = "BAT1:1000,BAT1:1000,BAT1:1000,BAT1:1000 V MAB1:5000"
var T13 = "BAT1:1000,BAT1:1000,BAT1:1000,BAT1:1000 V MAB1:5000,LAS1:2000"
var T13 = "MAB1:1000,BAT1:1000,BAT1:1000,BAT1:1000 V MAB1:5000,LAS1:2000"
var T14 = "MAB1:1000,MAB1:1000 V MAB1:1000,MAB1:1000"
var T15 = "DUL1:2000 V BAT1:1000,BAT1:1000"
var T16 = "DUL1:3000 V BAT1:1000,BAT1:1000"
var T17 = "BAT9:20000,LAS1:10000,DUL5:12000 V MAB4:15000,MAB4:15000,LAS5:12000"
var T18 = "asdasdasdasd"

var T19 = "BAT1:5000 V 1SEN"
var T20 = "BAT1:5000 V 3SEN"
var T21 = "DUL3:5000 V 3SEN"
var T22 = "DUL3:5000 V 3SEN,4GUA,3INT"
var T23 = "DUL9:15000,DUL9:15000,DUL9:15000 V 3SEN,4GUA,3INT"

//spaces
var T24 = " DUL3:5000, BAT5:1000  V 3SEN,4GUA,3INT"
var T25 = " DUL3:5000, BAT5:1000  V 3SEN , 4GUA , 3INT "

var CONSOLE_LOG = false

sim = doSim(T25,"ME",false)
//console.log(sim)
process.stdout.write(sim+"\n")

function doSim(inStr,side1Name, debug) {
  try {
    ret = parse(inStr)
  } catch (e) {
    process.stdout.write("Parse ERROR: " + inStr)
    return "Parse Error"
  }

  try {
    let s1Win = 0;
    for (let i = 0; i < 1000; i++) {
      ret = parse(inStr)
      if (debug && i == 999) {
        //only show last battle
        logMessages = []
      }
      doFight(ret)
      if (battle(ret)) {
        s1Win += 1
      }
    }
    retStr = "Out of 1000 simulations "+side1Name+" wins " + (s1Win/10) + "% of the time"
    if (debug) {
      return [JSON.stringify(logMessages, null, 4), retStr]
    } else {
      return retStr
    }
  } catch (e) {
    process.stdout.write("ERROR: " + inStr)
    return "error"
  }
}



module.exports.doSim = doSim;
module.exports.BAT = BAT
module.exports.DUL = DUL
module.exports.LAS = LAS
module.exports.MAB = MAB
